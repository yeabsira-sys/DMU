security:
- bearerAuth: []

components:
  ImageUploadMetadata:
      type: object
      required: [mimetype, originalname]
      properties:
        mimetype:
          type: string
          enum: [image/jpeg, image/png, image/webp]
          description: The MIME type of the uploaded image
        originalname:
          type: string
          description: Original name of the image file
        size:
          type: number
          description: File size in bytes (max 20MB)
          maximum: 20971520
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PasswordRecovery:
      type: object
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
        code:
          type: integer
          example: 123456
        newPassword:
          type: string
          minLength: 8
          maxLength: 30
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$'
          example: StrongPass1
          description: Must include at least one uppercase letter, one lowercase letter, and one number
        confirmPassword:
          type: string
          example: StrongPass1
          description: Must match the newPassword
      required: []
    deleteUser:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          oneOf:
            - type: string
              format: email
            - type: string
              pattern: '^(\+251|0)?9\d{8}$'
            - type: string
              minLength: 3
              maxLength: 30
          description: User identifier (email, phone number, or username)
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          description: Password for confirmation
          example: "StrongP@ssword123"

    getUserByUserName:
      type: object
      required:
        - userName
      properties:
        userName:
          type: string
          minLength: 3
          maxLength: 30
          description: Username with 3 to 30 characters
          example: "johndoe123"
    getUserByPhone:
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          pattern: '^(\+251|0)?9\d{8}$'
          description: Ethiopian phone number starting with +251 or 0 followed by 9 digits
          example: "+251912345678"
    getUserByEmail:
     type: object
     required:
       - email
     properties:
        email:
        type: string
        format: email
        example: "user@example.com"
        description: User's email address

    getUserByID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: '^[a-fA-F0-9]{24}$'
          description: MongoDB ObjectId (24-character hex string)
          example: "507f1f77bcf86cd799439011"

    suspendUser:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
          description: User identifier (email, Ethiopian phone number, or username)
          oneOf:
            - type: string
              format: email
            - type: string
              pattern: '^(\+251|0)?9\d{8}$'
            - type: string
              minLength: 3
              maxLength: 30
          example: "johndoe@example.com"
    updateUser:
      type: object
      required:
        - name
        - email
        - phone
        - role
        - identifier
      properties:
        name:
          type: string
          example: "Abebe Kebede"
        email:
          type: string
          format: email
          example: "abebe@example.com"
        phone:
          type: string
          pattern: '^[0-9]{9,15}$'
          description: Valid phone number (9 to 15 digits)
          example: "912345678"
        role:
          type: string
          enum: [student, admin, cda]
          example: "admin"
        status:
          type: string
          enum: [active, suspended]
          example: "active"
        identifier:
          oneOf:
            - type: string
              format: email
            - type: string
              pattern: '^(\+251|0)?9\\d{8}$'
            - type: string
              minLength: 3
              maxLength: 30
          description: "User identifier: email, phone number, or username"
          example: "abebe@example.com"
    createUser:
      type: object
      required:
        - name
        - phone
        - role
      properties:
        name:
          type: string
          minLength: 6
          maxLength: 60
          example: "Abebe Kebede"
        email:
          type: string
          format: email
          description: Valid email with at least 2 domain segments
          example: "abebe@example.com"
        phone:
          type: string
          pattern: '^(\+251|0)?9\\d{8}$'
          description: Phone number in Ethiopian format (+251 or 0 prefix)
          example: "+251912345678"
        role:
          type: string
          enum: [student, admin, cda]
          description: Role of the user
          example: "student"
    AuthRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          oneOf:
            - type: string
              format: email
            - type: string
              pattern: '^(\+251|0)?9\d{8}$'
            - type: string
              minLength: 3
              maxLength: 30
          description: "User identifier: email, Ethiopian phone (+251 or 0), or username (3-30 chars)"
          example: "johndoe@example.com"
        password:
          type: string
          minLength: 8
          description: "Password with minimum 8 characters"
          example: "mySecureP@ss123"
    ResetPasswordRequest:
      type: object
      required:
        - userName
        - newPassword
        - confirmPassword
      properties:
        userName:
          type: string
          minLength: 3
          maxLength: 30
          example: abebeabebe2313
        newPassword:
          type: string
          minLength: 8
          maxLength: 30
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$'
          description: Password with at least one uppercase, one lowercase, and one digit
          example: "StrongPass123"
        confirmPassword:
          type: string
          const: "StrongPass123"  # Swagger does not support Joi.ref, so this is illustrative
          description: Must match the new password
          example: "StrongPass123"